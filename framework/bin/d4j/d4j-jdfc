=pod

=head1 NAME

d4j-jdfc -- run code coverage analysis for a checked-out project version with jdfc.

=head1 SYNOPSIS

  d4j-jdfc [-w work_dir] [-r | [-t single_test] [-s test_suite]] [-i instrument_classes]

=head1 DESCRIPTION

This script executes a test or a test suite on a checked-out project version and
measures definition-use pair coverage, using JDFC. 

=head1 OPTIONS

=over 4

=item -w F<work_dir>

The working directory of the checked-out project version (optional). Default is
the current directory.

=item -r

Only execute relevant developer-written tests (optional). By default all developer-written
tests of the checked-out project version are executed.

=item -t C<single_test>

Only run this single test method (optional). By default all tests are executed.
Format: <test_class>::<test_method>.

=item -s F<test_suite>

The archive file name of an external test suite (optional). The default test suite is the
developer-written test suite of the checked-out project version.
See L<Test suites|/"Test suites">.

=item -i F<instrument_classes>

Measure code coverage for all classes listed in F<instrument_classes> (optional). By
default, code coverage is measured only for the classes modified by the bug fix. The file
F<instrument_classes> must contain fully-qualified class names -- one class per line.

=item -p C<intra|inter>

Scope of the analysis (optional). Default is C<intra>. See L<Scope|/"Scope">.

=back

=head1 Test suites

An external test suite has to be provided as an archive that contains the test sources.
Format of the archive file name:

F<C<project_id>-C<version_id>-C<test_suite_src>.C<test_id>.tar.bz2>

Examples:

=over 4

=item * F<Lang-11f-randoop.1.tar.bz2>

=item * F<Lang-12b-evosuite-weakmutation.1.tar.bz2>

=item * F<Lang-12f-evosuite-branch.1.tar.bz2>

=back

=cut

use strict;
use warnings;

use Constants;
use Utils;
use Project;
use Coverage;
use Getopt::Std;
use Pod::Usage;

my %cmd_opts;
getopts('t:w:rs:i:p:', \%cmd_opts) or pod2usage( { -verbose => 1, -input => __FILE__} );

my $WORK_DIR    = Utils::get_abs_path($cmd_opts{w} // ".");
my $REL_TESTS   = defined $cmd_opts{r} ? 1 : 0;
my $SINGLE_TEST = $cmd_opts{t};
my $TEST_SUITE  = $cmd_opts{s};
my $INSTRUMENT  = $cmd_opts{i};
my $SCOPE       = $cmd_opts{p};

if (not defined $SCOPE) {
    pod2usage( { -verbose => 1, -input => __FILE__} );
}

if (defined $SCOPE && $SCOPE ne "intra" && $SCOPE ne "inter") {
    pod2usage( { -verbose => 1, -input => __FILE__} );
}

if ((defined $SINGLE_TEST || defined $TEST_SUITE) && $REL_TESTS==1) {
    pod2usage( { -verbose => 1, -input => __FILE__} );
}

my $config = Utils::read_config_file("$WORK_DIR/$CONFIG");
unless(defined $config) {
    print(STDERR "$WORK_DIR is not a valid working directory!\n");
    exit 1;
}
my $pid = $config->{$CONFIG_PID};
my $vid = $config->{$CONFIG_VID};
my $bid = Utils::check_vid($vid)->{bid};

# Instantiate project and set working directory
my $project = Project::create_project($pid);
$project->{prog_root} = $WORK_DIR;

my $src_dir = $project->src_dir($vid);
# Classes to instrument for coverage analysis -- default is all modified classes
my $classes = $INSTRUMENT // "$SCRIPT_DIR/projects/$pid/modified_classes/$bid.src";

# Clean temporary files that hold test results
my $fail_tests = "$WORK_DIR/$FILE_FAILING_TESTS";
Utils::clean_test_results($WORK_DIR);

# Run the test suite, according to the provided flags
my $cov_results;
if (defined $TEST_SUITE) {
    # Compile and run external test suite
    # my $test_dir = "$WORK_DIR/.test_suite";
    # Utils::extract_test_suite($TEST_SUITE, $test_dir) or die;
    # $project->compile_ext_tests($test_dir) or die "Cannot compile extracted test suite!";
    # $cov_results = Coverage::coverage_ext($project, $classes, $src_dir, $test_dir, "*.java", $fail_tests, $SINGLE_TEST);
} elsif ($REL_TESTS) {
    # Compile and run only relevant developer-written tests
    $project->compile_tests() or die "Cannot compile test suite!";
    $cov_results = Coverage::jdfc($project, $classes, $src_dir, $fail_tests, $REL_TESTS, undef, undef, $SCOPE);
} else {
    # Compile and run developer-written tests
    $project->compile_tests() or die "Cannot compile test suite!";
    $cov_results = Coverage::jdfc($project, $classes, $src_dir, $fail_tests, undef, $SINGLE_TEST, undef, $SCOPE);
}
defined $cov_results or die "Couldn't obtain coverage results!";

#open(CSV, ">$WORK_DIR/summary.csv") or die "Cannot write output csv file $!";
#print(CSV "LinesTotal,LinesCovered,ConditionsTotal,ConditionsCovered\n");
#printf(CSV "%d,%d,%d,%d\n",
#        $cov_results->{lines_total},
#        $cov_results->{lines_covered},
#        $cov_results->{branches_total},
#        $cov_results->{branches_covered});
#close(CSV);
#
#printf("%18s: %d\n",     "Lines total",        $cov_results->{lines_total});
#printf("%18s: %d\n",     "Lines covered",      $cov_results->{lines_covered});
#printf("%18s: %d\n",     "Conditions total",   $cov_results->{branches_total});
#printf("%18s: %d\n",     "Conditions covered", $cov_results->{branches_covered});
#printf("%18s: %.1f%%\n", "Line coverage",      $cov_results->{lines_covered}/$cov_results->{lines_total}*100);
#printf("%18s: %.1f%%\n", "Condition coverage", ($cov_results->{branches_total} == 0 ? 0 : $cov_results->{branches_covered}/$cov_results->{branches_total}*100));
#printf("%17s: %.1f seconds\n", "Total run time", ($timeAnalysis));

# Issue a warning if any test failed as this might give misleading results
Utils::has_failing_tests($fail_tests)
        and print(STDERR "WARNING: Some tests failed (see $fail_tests)!\n");

1;
